@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json
@inject IJSRuntime JSRuntime
@using System.Net.Http.Headers


<div>
    <ul>
        <li><NavLink href="/apikey/register" Match="NavLinkMatch.All">Registrera ny API-key</NavLink></li>
        <li><NavLink href="/browse" Match="NavLinkMatch.All">Sök bostäder</NavLink></li>
        @if (UserAuthenticated)
        {
            <li><NavLink href="/realtors" Match="NavLinkMatch.All">Se mäklare</NavLink></li>
        }
        <li><NavLink href="/realtors/create" Match="NavLinkMatch.All">Skapa ny mäklare</NavLink></li>
        <li><NavLink href="/houses" Match="NavLinkMatch.All">Se alla hus</NavLink></li>
        @if (UserAuthenticated == false)
        {
            <li><NavLink href="/login" Match="NavLinkMatch.All">Logga in</NavLink></li>
        }
    </ul>
</div>

@code {

    private bool UserAuthenticated { get; set; }
    public class AuthenticationStatusResponse
    {
        public string Status { get; set; }
        public string Message { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        var response = await Http.GetAsync("api/authenticate/status");
        if(response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();

            // Deserialize the JSON response to an object
            var responseData = JsonSerializer.Deserialize<AuthenticationStatusResponse>(responseContent);

            // Set UserAuthenticated based on the authentication status in the response
            UserAuthenticated = true;

        }

    }

}
