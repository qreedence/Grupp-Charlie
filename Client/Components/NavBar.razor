@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json
@inject IJSRuntime JSRuntime
@using System.Net.Http.Headers

@*Authors: Susanna Renström, Mikaela Älgekrans, Eden Yusof-Ioannidis*@

<div class="nav-bar">

    <div class="nav-left">

        <NavLink href="/" Match="NavLinkMatch.All">
            <button id="logo-btn" style="margin:0; margin-right:10px; padding:0px;">

                <img src="/img/bostadsbubblan-logo.svg" height="100" lenght="100" />

            </button>
        </NavLink>
        @if (UserAuthenticated == true)
        {

            <NavLink href="/adminpages" Match="NavLinkMatch.All">Admin-sidor</NavLink>
        }
        <NavLink href="/browse" Match="NavLinkMatch.All">Sök bostad</NavLink>

    </div>

    <div class="nav-right">
        @if (UserAuthenticated == false)
        {
            <NavLink href="/register-not-loggedin" Match="NavLinkMatch.All">Registrera konto</NavLink>
            <NavLink href="/login" Match="NavLinkMatch.All">Logga in</NavLink>

        }
        @if (UserAuthenticated == true && Realtor != null)
        {
            <a href="/realtor/profile/@Realtor.Id">
                <span class="material-symbols-outlined">
                    account_circle
                </span>
                Mina sidor
            </a>

            <button @onclick="Logout" id="navbar-btn">Logga ut</button>
        }

    </div>
</div>

@code {
    private bool UserAuthenticated { get; set; }

    public string UserNameFromToken { get; set; }

    public Realtor Realtor { get; set; } = new Realtor();

    protected override async Task OnInitializedAsync()
    {
        await UpdateAuthenticationStatusAsync();
    }

    private async Task UpdateAuthenticationStatusAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var currentToken = await Http.GetAsync($"api/authenticate/getusername?token={token}");
            UserNameFromToken = await currentToken.Content.ReadAsStringAsync();
            Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/getbyname?username={UserNameFromToken}");
        }
        var response = await Http.GetAsync("api/authenticate/status");
        if (response.IsSuccessStatusCode)
        {
            UserAuthenticated = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateAuthenticationStatusAsync();
        {
            StateHasChanged();
        }
    }

    //Author: Eden Yusof-Ioannidis
    public async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        UserAuthenticated = false;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

    public async Task GoToProfile()
    {
        NavigationManager.NavigateTo($"/realtor/profile/{Realtor.Id}");
    }

}
