@page "/inactive-accounts"
@inject HttpClient Http
@using System.Net.Http.Json
@using Client.Models
@using System.Net.Http.Headers
@using System.Security.Claims
@inject IJSRuntime JSRuntime

@*Author: Susanna Renström*@
<h3>Konton att godkänna</h3>


<EditForm Model="Realtor" OnSubmit="Submit">
    <div>

        @{
            //Get username from current logged-in user
            var filteredList = Realtors.Where(u => u.UserName == UserNameFromToken).ToList();
            List<Realtor> realtorsWithEmailNotConfirmed = new List<Realtor>();
            <div>
            @foreach (var realtor in filteredList)
            {
                var agencyId = realtor.Agency.AgencyId;
                //Filters list based on current logged-in users agency
                var realtorsInAgency = Realtors.Where(a => a.Agency != null && a.Agency.AgencyId == agencyId).ToList();
                realtorsWithEmailNotConfirmed.AddRange(realtorsInAgency.Where(a => a.EmailConfirmed == false));
            }
            @if (realtorsWithEmailNotConfirmed == null)
            {
                <p>Ett ögonblick...</p>

            }
            </div>
            <div>
            @if (realtorsWithEmailNotConfirmed != null && realtorsWithEmailNotConfirmed.Count > 0)
                {
                
                <select @bind="RealtorId">
                        <option value="">Välj konto</option>
                    @foreach (var item in realtorsWithEmailNotConfirmed)
                    {
                        <option value="@item.Id">@item.FirstName @item.LastName</option>
                    }

                </select>
            }
            </div>
            <div>
            @if (realtorsWithEmailNotConfirmed.Count == 0)
            {
                <p>Det finns inga konton att godkänna just nu</p>
            }
            </div>
        }
    </div>
    <br />
    <div>
    @if (realtorsWithEmailNotConfirmed != null && realtorsWithEmailNotConfirmed.Count > 0)
    {
        <button type="submit">Godkänn mäklarkonto</button>
    }
    </div>
</EditForm>

<button @onclick="NavigateBackToRealtors">Tillbaka till översikt</button>

@code {
    [Parameter]
    public string Id { get; set; }
    public Realtor Realtor { get; set; } = new Realtor();
    public string RealtorId { get; set; }
    public List<Realtor> Realtors { get; set; } = new List<Realtor>();
    public string UserNameFromToken { get; set; }

    protected override async Task OnInitializedAsync()

    {
        Realtors = await Http.GetFromJsonAsync<List<Realtor>>("api/realtor");
        //Get token from storage
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        //Get username from token
        var currentToken = await Http.GetAsync($"api/authenticate/getusername?token={token}");
        UserNameFromToken = await currentToken.Content.ReadAsStringAsync();

    }

    public async Task Submit()
    {
        Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/{RealtorId}");
        Id = Realtor.Id;
        Realtor.EmailConfirmed = true;
        var result = await Http.PutAsJsonAsync<Realtor>($"api/realtor/{(string)Id}", Realtor);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/realtors");
        }

    }
    public async Task NavigateBackToRealtors()
    {
        NavigationManager.NavigateTo($"/realtors");
    }


}
