@page "/inactive-accounts"
@inject HttpClient Http
@using System.Net.Http.Json
@using Client.Models
@using System.Net.Http.Headers
@using System.Security.Claims
@inject IJSRuntime JSRuntime

@*Author: Susanna Renström*@

<h3>Konton att godkänna</h3>

@{
    //Get username from current logged-in user
    FilteredList = Realtors.Where(u => u.UserName == UserNameFromToken).ToList();
    List<Realtor> realtorsWithEmailNotConfirmed = new List<Realtor>();
    <div>
        @foreach (var realtor in FilteredList)
        {
            var agencyId = realtor.Agency.AgencyId;
            //Filters list based on current logged-in users agency
            var realtorsInAgency = Realtors.Where(a => a.Agency != null && a.Agency.AgencyId == agencyId).ToList();
            realtorsWithEmailNotConfirmed.AddRange(realtorsInAgency.Where(a => a.EmailConfirmed == false));
        }
    </div>
    @if (realtorsWithEmailNotConfirmed == null)
    {
        <p>Ett ögonblick...</p>

    }
    else
    {
        @if (showForm)
        {
            <EditForm Model="Realtor" OnSubmit="Submit">
                <div>

                    @{
                        <div>
                            @if (realtorsWithEmailNotConfirmed != null && realtorsWithEmailNotConfirmed.Count > 0)
                            {
                                <select @bind="RealtorId">
                                    <option value="">Välj konto</option>
                                    @foreach (var realtor in realtorsWithEmailNotConfirmed)
                                    {
                                        <option value="@realtor.Id">@realtor.FirstName @realtor.LastName @realtor.Agency.NameOfAgency</option>
                                    }
                                </select>
                                <br>
                                <button type="submit">Godkänn mäklarkontod</button>
                            }
                        </div>
                        
                        <div>
                            @if (realtorsWithEmailNotConfirmed.Count == 0)
                            {
                                <p>Det finns inga konton att godkänna just nu</p>
                            }
                        </div>
                    }
                </div>
                <br />
             
            </EditForm>
        }
    }
    }
    <br />
    <br />
    <p>@Message</p>
    <br />
    <br />

    <button @onclick="NavigateBackToRealtors">Tillbaka till översikt</button>


    @code {
        [Parameter]
        public string Id { get; set; }
        public Realtor Realtor { get; set; } = new Realtor();
        public string? RealtorId { get; set; }
        public List<Realtor> Realtors { get; set; } = new List<Realtor>();
        public string? UserNameFromToken { get; set; }
        public string? Message { get; set; }
        public List<Realtor> FilteredList { get; set; } = new List<Realtor>();
        bool showForm = true;

        protected override async Task OnInitializedAsync()

        {
            Realtors = await Http.GetFromJsonAsync<List<Realtor>>("api/realtor");
            //Get token from storage
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (token != null)
            //Get username from token
            {
                var currentToken = await Http.GetAsync($"api/authenticate/getusername?token={token}");
                UserNameFromToken = await currentToken.Content.ReadAsStringAsync();
            }
        }

        public async Task Submit()
        {
            Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/{RealtorId}");
            Id = Realtor.Id;
            Realtor.EmailConfirmed = true;
            var result = await Http.PutAsJsonAsync<Realtor>($"api/realtor/{(string)Id}", Realtor);

            if (result.IsSuccessStatusCode)
            {
                showForm = false;
                Message = "Kontot är nu godkänt och användaren kan logga in!";
            }

        }
        public void NavigateBackToRealtors()
        {
            NavigationManager.NavigateTo($"/realtors");
        }
    }
