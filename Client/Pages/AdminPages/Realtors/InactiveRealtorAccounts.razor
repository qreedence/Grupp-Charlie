@page "/inactive-accounts"
@inject HttpClient Http
@using System.Net.Http.Json
@using Client.Services
@using Models
@using System.Net.Http.Headers
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject MessageService MessageService

@*Author: Susanna Renström*@
@*Co-Author: Mikaela Älgekrans*@

@if (RealtorsWithEmailNotConfirmed == null)
{
    <p>Ett ögonblick...</p>
}
else if (showForm)
{
    <div class="center">
        <EditForm Model="Realtor" OnSubmit="Submit" class="card form">
            <label><h3>Konton att godkänna</h3></label>
            <div>
                @if (RealtorsWithEmailNotConfirmed.Count > 0)
                {
                    <select @bind="RealtorId">
                        <option value="">Välj konto</option>
                        @foreach (var realtor in RealtorsWithEmailNotConfirmed)
                        {
                            <option value="@realtor.Id">@realtor.FirstName @realtor.LastName</option>
                        }
                    </select>
                    <div style="display: flex; gap: 0.1rem;justify-content:center;">
                        <button type="submit">Godkänn mäklarkonto</button>
                    </div>
                }
                else
                {
                    <p>Det finns inga konton att godkänna just nu</p>
                }
            </div>
            <div style="display: flex; gap: 0.1rem;justify-content:center;">
                <button @onclick="NavigateBackToRealtors">Tillbaka till översikt</button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Realtor Realtor { get; set; } = new Realtor();
    private Realtor? User { get; set; } = new Realtor();
    public string? RealtorId { get; set; }
    public List<Realtor> Realtors { get; set; } = new List<Realtor>();
    public string? UserNameFromToken { get; set; }
    public string? Message { get; set; }
    public List<Realtor> RealtorsWithEmailNotConfirmed { get; set; } = new List<Realtor>();
    bool showForm = true;

    protected override async Task OnInitializedAsync()
    {
        Realtors = await Http.GetFromJsonAsync<List<Realtor>>("api/realtor");
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (token != null)
        {
            var currentTokenResponse = await Http.GetAsync($"api/authenticate/getusername?token={token}");
            if (currentTokenResponse.IsSuccessStatusCode)
            {
                UserNameFromToken = await currentTokenResponse.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(UserNameFromToken))
                {
                    User = await Http.GetFromJsonAsync<Realtor>($"api/realtor/getbyname?username={UserNameFromToken}");
                    if (User?.Agency != null)
                    {
                        Realtors = Realtors.Where(r => r.Agency?.AgencyId == User.Agency.AgencyId).ToList();
                        RealtorsWithEmailNotConfirmed = Realtors.Where(r => r.EmailConfirmed == false).ToList();
                    }
                }
            }
        }
    }

    public async Task Submit()
    {
        Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/{RealtorId}");
        Id = Realtor.Id;
        Realtor.EmailConfirmed = true;
        var result = await Http.PutAsJsonAsync<Realtor>($"api/realtor/{(string)Id}", Realtor);

        if (result.IsSuccessStatusCode)
        {
            var message = new Message
                {
                    Text = $"Konto för '{Realtor.FirstName} {Realtor.LastName}' är nu godkänt och användaren kan logga in!",
                    Type = MessageType.Success
                };
            await NavigateBackToRealtors(message);
        }
    }

    public async Task NavigateBackToRealtors(Message message)
    {
        if (message != null)
        {
            MessageService.SendMessage(message); // Sends Message to the Navigated page
        }
        NavigationManager.NavigateTo($"/realtors");
    }

    public void NavigateBackToRealtors()
    {
        NavigationManager.NavigateTo($"/realtors");
    }
}
