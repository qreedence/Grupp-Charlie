@page "/houses/create"
@using Client.Components
@using Models;
@inject HttpClient Http
@using System.Net.Http.Json
@using Client.Services
@inject MessageService MessageService
@inject IJSRuntime JSRuntime


@*Author: Mikaela Älgekrans*@
<CheckAuthorization/>
<ReceiveMessage />
<EditForm Model="House" OnSubmit="Submit" FormName="CreateHouse" class="card form">

    <div>
        <label>Mäklare</label>
        @if (Realtors != null)
        {
            <select @bind="RealtorId" >
                @foreach (var realtor in Realtors)
                {
                    if (Realtor != null && realtor.Id == Realtor.Id)
                    {
                        <option value="@realtor.Id" selected disabled>@realtor.FirstName @realtor.LastName</option>
                    }
                    @* <option value="@realtor.Id" disabled>@realtor.FirstName @realtor.LastName</option> *@
                }
            </select>
        }
    </div>
    <div>
        <label>Bostadstyp</label>
        @if (Categories != null)
        {
            <select @bind="CategoryId">
                <option value="">Välj kategori</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </select>
        }
    </div>
    <div>
        <label>Adress</label>
        <InputText @bind-Value="House.Adress"></InputText>
    </div>
    <div>
        <label>Län</label>
        @if (Counties != null)
        {
               <select @bind-value="CountyId" @onchange="FilterMunicipalities" @bind-value:event="oninput">
                <option value="">Välj län</option>
                @foreach (var county in Counties)
                {
                    <option value="@county.CountyId">@county.CountyName</option>
                }
            </select>
        }
    </div>
    <div>
        <label>Kommun</label>
        @if (Municipalities != null)
        {
            <select @bind="MunicipalityId">
                <option value="" selected>Välj kommun</option>
                @foreach (var municipality in FilteredMunicipalities)
                {
                    <option value="@municipality.MunicipalityId">@municipality.MunicipalityName</option>
                }
            </select>
        }
    </div>
    <div>
        <label>Pris</label>
        <InputNumber @bind-Value="House.Price"></InputNumber>
    </div>
    <div>
        <label>Boarea</label>
        <InputNumber @bind-Value="House.LivingArea"></InputNumber>
    </div>
    <div>
        <label>Biarea</label>
        <InputNumber @bind-Value="House.AuxiliaryArea"></InputNumber>
    </div>
    <div>
        <label>Tomtarea</label>
        <InputNumber @bind-Value="House.PlotArea"></InputNumber>
    </div>
    <div>
        <label>Beskrivning</label>
        <InputTextArea @bind-Value="House.Description"></InputTextArea>
    </div>
    <div>
        <label>Antal rum</label>
        <select @bind="House.NumberOfRooms">
            @for (int i = 1; i<=20; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>
    <div>
        <label>Månadsavgift</label>
        <InputNumber @bind-Value="House.MonthlyFee"></InputNumber>
    </div>
    <div>
        <label>Årlig driftkostnad</label>
        <InputNumber @bind-Value="House.OperatingCostPerYear"></InputNumber>
    </div>
    <div>
        <label>Byggår</label>
        <InputNumber @bind-Value="House.YearOfConstruction"></InputNumber>
    </div>
    <div>
        <label>Bildgalleri</label><br />
        @if (Images != null && Images.Count > 0)
        {<table>
            @foreach (var image in Images)
            {
                <div>
                    <label>Bild URL</label><br />
                    
                    <tr><td><InputText @bind-Value="image.ImageURL"></InputText></td></tr>
                  
                </div>
            }
        </table>

        }
        <button type="button" @onclick="AddImageField">Lägg till bild</button>
    </div>

    <div style="display: flex; gap: 0.1rem;justify-content:center;">
        <button type="submit">Spara</button>
        <button @onclick="() => NavigateBackToHouses(CreateErrorMessage())">Avbryt</button>
    </div>
</EditForm>

@code {
    private House House { get; set; } = new House();

    private List<Category> Categories { get; set; } = new List<Category>();
    private List<County> Counties { get; set; } = new List<County>();
    private List<Realtor> Realtors { get; set; } = new List<Realtor>();
    private List<Municipality> Municipalities { get; set; } = new List<Municipality>();
    private List<Municipality> FilteredMunicipalities { get; set; } = new List<Municipality>();
    private Realtor Realtor { get; set; } = new Realtor();
    private int CategoryId { get; set; }
    private int CountyId { get; set; }
    private string RealtorId { get; set; }
    private int MunicipalityId { get; set; }

    public List<Image> Images { get; set; } = new List<Image>();

    protected override async Task OnInitializedAsync()
    {   
        Municipalities = await Http.GetFromJsonAsync<List<Municipality>>("api/municipality");
        Categories = await Http.GetFromJsonAsync<List<Category>>("api/category");
        Counties = await Http.GetFromJsonAsync<List<County>>("api/county");
        Realtors = await Http.GetFromJsonAsync<List<Realtor>>("api/realtor");
        Counties.Sort((c1, c2) => c1.CountyName.CompareTo(c2.CountyName));
        Municipalities.Sort((m1, m2) => m1.MunicipalityName.CompareTo(m2.MunicipalityName));

        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var currentTokenResponse = await Http.GetAsync($"api/authenticate/getusername?token={token}");
            if (currentTokenResponse.IsSuccessStatusCode)
            {
                string username = await currentTokenResponse.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(username))
                {
                    Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/getbyname?username={username}");
                }
            }
        }
    }

    void AddImageField()
    {      
        Images.Add(new Image());
    }

    public async Task Submit()
    {
        try
        {
            House.County = await Http.GetFromJsonAsync<County>($"api/county/{CountyId}");
            House.Municipality = await Http.GetFromJsonAsync<Municipality>($"api/municipality/{MunicipalityId}");
            House.Category = await Http.GetFromJsonAsync<Category>($"api/category/{CategoryId}");
            House.Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/{RealtorId}");
            House.Gallery = Images;     

            var result = await Http.PostAsJsonAsync<House>("api/House", House);
            if (result.IsSuccessStatusCode)
            {
                var message = new Message
                    {
                        Text = $"Objektet '{House.Adress}' har skapats!",
                        Type = MessageType.Success
                    };
                await NavigateBackToHouses(message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Något gick fel: {ex}");
            CreateErrorMessage();
        }
    }

    public async Task NavigateBackToHouses(Message message)
    {
        if (message != null)
        {
            MessageService.SendMessage(message); // Sends Message to the Navigated page
        }
        NavigationManager.NavigateTo($"/houses");
    }

    void NavigateBackToHouses()
    {
        NavigationManager.NavigateTo($"/houses");
    }

    public Message CreateErrorMessage()
    {
        return new Message { Text = "Processen för att lägga till ett nytt objekt har avbrutits.", Type = MessageType.Error };
    }

    public async Task FilterMunicipalities()
    {
        House.County = await Http.GetFromJsonAsync<County>($"api/county/{CountyId}");
        FilteredMunicipalities = Municipalities.Where(m => m.CountyName == House.County.CountyName).ToList();
        StateHasChanged();
    }
}

