@page "/houses"
@inject HttpClient Http
@using Models;
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime

@*Authors: Susanna Renström, Mikaela Älgekrans, Eden Yusof-Ioannidis*@

<CheckAuthorization />
<ReceiveMessage />

<div class="button-row padding">
    <NavLink href="/houses/create" Match="NavLinkMatch.All"><button>Skapa ny bostad</button></NavLink>
    <NavLink href="/soldhouses" Match="NavLinkMatch.All"><button>Visa sålda bostäder</button></NavLink>
</div>

@if (ListOfHouses == null)
{

    <p>Ett ögonblick..</p>
}
else
{    
    <div class="center card white">
        <div class="houses">
            @foreach (var house in ListOfHouses)
            {
                <div class="realtor-house-card" @onclick="() => NavigateToHouse(house.HouseId)" style="background-image: url('@(house.Gallery.FirstOrDefault()?.ImageURL ?? "https://bphomes.co.uk/wp-content/uploads/2023/03/placeholder-867x600.jpg")');">
                    <div class="house-card-info">
                        <h3>@house.Adress</h3>
                        <h2>@(house.Price.ToString("N0") + " kr")</h2>
                        <p>@house.Municipality.MunicipalityName, @house.County.CountyName</p>
                        @if (@house.Category != null)
                        {
                            <p class="category-line">
                                @if (@house.Category.CategoryName == "Villa")
                                {
                                    <span class="material-symbols-outlined">
                                        home
                                    </span>
                                }
                                else if (@house.Category.CategoryName == "Par/Kedje/Radhus")
                                {
                                    <span class="material-symbols-outlined">
                                        other_houses
                                    </span>
                                }
                                else if (@house.Category.CategoryName == "Lägenhet")
                                {
                                    <span class="material-symbols-outlined">
                                        location_city
                                    </span>
                                }
                                else if (@house.Category.CategoryName == "Fritidsboende")
                                {
                                    <span class="material-symbols-outlined">
                                        cottage
                                    </span>
                                }
                                else if (@house.Category.CategoryName == "Gård")
                                {
                                    <span class="material-symbols-outlined">
                                        fence
                                    </span>
                                }
                                @house.Category.CategoryName
                            </p>
                            <p>Antal rum: @house.NumberOfRooms | Boarea: @house.LivingArea ㎡</p>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
 }

@code {

    private List<House> ListOfHouses { get; set; }

    private Realtor Realtor { get; set; } = new Realtor();

    protected override async Task OnInitializedAsync()
    {        
        ListOfHouses = await Http.GetFromJsonAsync<List<House>>("api/house");
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var currentTokenResponse = await Http.GetAsync($"api/authenticate/getusername?token={token}");
            if (currentTokenResponse.IsSuccessStatusCode)
            {
                string username = await currentTokenResponse.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(username))
                {
                    Realtor = await Http.GetFromJsonAsync<Realtor>($"api/realtor/getbyname?username={username}");
                }
            }
        }
        ListOfHouses = ListOfHouses.Where(h => h.Realtor.Agency.AgencyId == Realtor.Agency.AgencyId).ToList();
    }

    void UpdateHouse(int id)
    {
        NavigationManager.NavigateTo($"/houses/update/{id}");
    }
    void DeleteHouse(int id)
    {
        NavigationManager.NavigateTo($"/houses/delete/{id}");
    }

    void NavigateToHouse(int id)
    {
        NavigationManager.NavigateTo($"/browse/{id}");
    }
}