@page "/browse"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Models;
@using System.Net.Http.Json

@*Author: Eden Yusof-Ioannidis*@

<div class="card form">
    <div>
        <label>Välj län</label>
        @if (Counties != null)
        {
            <select @bind-value="CountyId" @onchange="FilterMunicipalities" @bind-value:event="oninput">
                <option value="" selected>Välj län</option>
                @foreach (var county in Counties)
                {
                    <option value="@county.CountyId">@county.CountyName</option>
                }
            </select>
        }
    </div>
    <div>
        <label>Välj kommun</label>
        @if (Municipalities != null)
        {
            <select @bind="MunicipalityId">
                <option value="" selected>Välj kommun</option>
                @foreach (var municipality in FilteredMunicipalities)
                {
                    <option value="@municipality.MunicipalityId">@municipality.MunicipalityName</option>
                }
            </select>
        }
    </div>
    <div>
        <label>Välj bostadstyp:</label>
        @if (Categories != null)
        {
            <select @bind="CategoryId">
                @foreach (var category in Categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </select>
        }
    </div>
    <div class="button-row">
        <button type="button" @onclick="Search">Sök</button>
        <button type="button" @onclick="NoFilter">Rensa filter</button>
    </div>
</div>




@if (FilteredList == null)
{
    <p>Laddar...</p>
}
else if (FilteredList.Count == 0)
{
    <div class="houses-list">
        <p>Inga resultat matchade din sökning.</p>
    </div>

}
else
{
    <div class="houses-list">
        @foreach (var house in FilteredList)
        {
            <div class="house-card">
                <div class="card-left">
                    @if (house.Gallery != null && house.Gallery.Count > 0)
                    {
                            <img src="@house.Gallery.FirstOrDefault().ImageURL" />
                    }
                    else
                    {
                        <img src="https://bphomes.co.uk/wp-content/uploads/2023/03/placeholder-867x600.jpg" />
                    }
                </div>
                <div class="card-right">
                    <div class="house-info">
                        <h3>@house.Adress</h3>
                        <p>@house.Municipality.MunicipalityName, @house.County.CountyName</p>
                        <p class="category-line">
                            @if (house.Category.CategoryName == "Villa")
                            {
                                <span class="material-symbols-outlined">
                                    home
                                </span>
                            }
                            else if (house.Category.CategoryName == "Par/Kedje/Radhus")
                            {
                                <span class="material-symbols-outlined">
                                    other_houses
                                </span>
                            }
                            else if (house.Category.CategoryName == "Lägenhet")
                            {
                                <span class="material-symbols-outlined">
                                    location_city
                                </span>
                            }
                            else if (house.Category.CategoryName == "Fritidsboende")
                            {
                                <span class="material-symbols-outlined">
                                    cottage
                                </span>
                            }
                            else if (house.Category.CategoryName == "Gård")
                            {
                                <span class="material-symbols-outlined">
                                    fence
                                </span>
                            }
                            @house.Category.CategoryName
                        </p>
                        <p>@(house.Price.ToString("N0") + " kr")</p>
                        <p id="card-description">@(house.Description?.Split('.')[0])</p>
                    </div>
                    <div>
                        <a href="/browse/@house.HouseId"><button>Se detaljer</button></a>
                    </div>
                </div>
            </div>

        }
    </div>
}

@code {

    private List<House> ListOfHouses { get; set; }

    private List<House> FilteredList { get; set; }

    private List<Category> Categories { get; set; }

    private List<County> Counties { get; set; } = new List<County>();
    private List<Municipality> Municipalities { get; set; } = new List<Municipality>();
    private List<Municipality> FilteredMunicipalities { get; set; } = new List<Municipality>();

    private int CategoryId { get; set; }

    private string SelectedCounty { get; set; } = "";

    public string srcUrl { get; set; }

    public string APIKey { get; set; }

    public int CountyId { get; set; }
    public int MunicipalityId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ListOfHouses = await Http.GetFromJsonAsync<List<House>>("api/house");
        FilteredList = ListOfHouses.ToList();
        Categories = await Http.GetFromJsonAsync<List<Category>>("api/category");
        Counties = await Http.GetFromJsonAsync<List<County>>("api/county");
        Counties.Sort((c1, c2) => c1.CountyName.CompareTo(c2.CountyName));
        Municipalities = await Http.GetFromJsonAsync<List<Municipality>>("/api/municipality");
        Municipalities.Sort((m1, m2) => m1.MunicipalityName.CompareTo(m2.MunicipalityName));
    }

    public async Task Search()
    {
        if (ListOfHouses != null && !string.IsNullOrEmpty(SelectedCounty) && CategoryId != 0)
        {
            FilteredList = ListOfHouses.Where(h => h.County != null && h.County.CountyName == SelectedCounty && h.Category.CategoryId == CategoryId).ToList();
            StateHasChanged();
        }

        if (ListOfHouses != null && string.IsNullOrEmpty(SelectedCounty) && CategoryId != 0)
        {
            FilteredList = ListOfHouses.Where(h => h.Category.CategoryId == CategoryId).ToList();
            StateHasChanged();
        }

        if (ListOfHouses != null && !string.IsNullOrEmpty(SelectedCounty) && CategoryId == 0)
        {
            FilteredList = ListOfHouses.Where(h => h.County != null && h.County.CountyName == SelectedCounty).ToList();
            StateHasChanged();
        }
    }

    public async Task NoFilter()
    {
        FilteredList = await Http.GetFromJsonAsync<List<House>>("api/house");
        StateHasChanged();
    }

    public async Task FilterMunicipalities()
    {
        var result = await Http.GetFromJsonAsync<County>($"api/county/{CountyId}");
        SelectedCounty = result.CountyName;
        FilteredMunicipalities = Municipalities.Where(m => m.CountyName == SelectedCounty).ToList();
        StateHasChanged();
    }
}