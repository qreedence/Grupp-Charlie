@page "/browse"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Models;
@using System.Net.Http.Json

@*Author: Eden Yusof-Ioannidis*@

<h3>Houses</h3>
<div>
    <label>Ange kommun att söka bostad i:</label>
    <InputText @bind-Value="County"></InputText>
</div>
<div>
    <label>Välj bostadstyp:</label>
    @if (Categories != null)
    {
        <select @bind="CategoryId">
            @foreach (var category in Categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </select>
    }
</div>
<div>
    <button type="button" @onclick="Search">Sök</button>
    <button type="button" @onclick="NoFilter">Rensa filter</button>
</div>
@* 
<div id="map" style="height: 400px;"></div>

<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_KEY_HERE&callback=initMap" async defer></script>
<script>
    var map;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 62, lng: 15 }, // Center on Sweden
            zoom: 5
        });
    }

    function addMarkers(adresses) {
        var geocoder = new google.maps.Geocoder();

        // Geocode each address and add a marker on the map
        addresses.forEach(function (address) {
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                } else {
                    console.error('Geocode was not successful for the following reason: ' + status);
                }
            });
        });
    }
</script> *@

@if (FilteredList == null)
{
    <p>Ett ögonblick...</p>
}
else if (FilteredList.Count == 0)
{
    <p>Inga hus hittades</p>
}
else
{
    @foreach (var house in FilteredList)
    {
        <div>
            <h3>@house.Adress</h3>
            <p>Kommun: @house.County.CountyName</p>
            <p>Pris: @house.Price</p>
            <p>Kategori: @house.Category.CategoryName</p>
            <a href="/browse/@house.HouseId">View Details</a>
        </div>
    }
}

@code {

    private List<House> ListOfHouses { get; set; }

    // private List<string> AdressList { get; set; } = new List<string>();

    private List<House> FilteredList { get; set; }

    private List<Category> Categories { get; set; }

    private int CategoryId { get; set; }

    private string County { get; set; } = "";

    public string srcUrl { get; set; }

    public string APIKey { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ListOfHouses = await Http.GetFromJsonAsync<List<House>>("api/house");
        FilteredList = ListOfHouses.ToList();
        Categories = await Http.GetFromJsonAsync<List<Category>>("api/category");
        // await ListAdresses();
        // await JSRuntime.InvokeVoidAsync("addMarkers", AdressList);
    }

    public async Task Search()
    {
        if (ListOfHouses != null && !string.IsNullOrEmpty(County) && CategoryId != 0)
        {
            FilteredList = ListOfHouses.Where(h => h.County != null && h.County.CountyName == County && h.Category.CategoryId == CategoryId).ToList();
            // await ListAdresses();
            // await JSRuntime.InvokeVoidAsync("addMarkers", AdressList);
            StateHasChanged();
        }

        if (ListOfHouses != null && string.IsNullOrEmpty(County) && CategoryId != 0)
        {
            FilteredList = ListOfHouses.Where(h => h.Category.CategoryId == CategoryId).ToList();
            // await ListAdresses();
            // await JSRuntime.InvokeVoidAsync("addMarkers", AdressList);
            StateHasChanged();
        }

        if (ListOfHouses != null && !string.IsNullOrEmpty(County) && CategoryId == 0)
        {
            FilteredList = ListOfHouses.Where(h => h.County != null && h.County.CountyName == County).ToList();
            // await ListAdresses();
            // await JSRuntime.InvokeVoidAsync("addMarkers", AdressList);
            StateHasChanged();
        }
    }

    public async Task NoFilter()
    {
        FilteredList = await Http.GetFromJsonAsync<List<House>>("api/house");
        StateHasChanged();
    }

    // public async Task ListAdresses()
    // {
    //     AdressList.Clear();
    //     foreach (var house in FilteredList)
    //     {
    //         AdressList.Add(house.Adress);
    //     }
    // }
}