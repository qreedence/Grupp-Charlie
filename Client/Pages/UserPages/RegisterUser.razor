@page "/register"
@inject HttpClient Http
@using System.Net.Http.Json
@using Client.Models
@inject NavigationManager NavigationManager

@*Author: Susanna Renström*@
@*Co-Author: Eden Yusof-Ioannidis - valideringar*@
@*RegisterUser*@


@if (Response == null)
{
    <EditForm Model="RegisterModel" OnSubmit="Submit" class="card form">
        <h3>Skapa ny användare</h3>
        <div>
            <label>Förnamn</label>
            <InputText @bind-Value="RegisterModel.FirstName" required></InputText>
        </div>
        <div>
            <label>Efternamn</label>
            <InputText @bind-Value="RegisterModel.LastName" required></InputText>
        </div>
        <div>
            <label>Epostadress</label>
            <InputText @bind-Value="RegisterModel.Email" required></InputText>
        </div>
        <div>
            <label>Lösenord</label>
            <InputText type="password" @bind-Value="RegisterModel.Password" required></InputText>
        </div>
        <div>
            <label>Bekräfta lösenord</label>
            <InputText type="password" @bind-Value="ConfirmPassword" required></InputText>
        </div>
        <div>
            <label>Telefonnummer</label>
            <InputText @bind-Value="RegisterModel.PhoneNumber" required></InputText>
        </div>
        <div>
            <label>Avatar URL</label>
            <InputText @bind-Value="RegisterModel.Avatar" required></InputText>
        </div>
        <div>
            <label>Mäklarfirma</label>
            <select @bind="AgencyId">
                <option value="">Ange mäklarfirma</option>
                @foreach (var agency in Agencies)
                {
                    <option value="@agency.AgencyId">@agency.NameOfAgency</option>
                }
            </select>
        </div>
        <button type="submit">Skapa användare</button>
        @if (!String.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-box">
                <p>@ErrorMessage</p>
            </div>
        }

    </EditForm>
}
<br />
<br />
@if(Response != null)
{
    <div class="card form">
        <p>@Response?.Message</p>

        @if (@Response?.Status == "Success")
        {
            <p>Kontot måste godkännas innan användaren kan logga in</p>
            <br />
            <button @onclick="@(() => NavigateBackToRealtors())">Tillbaka till översikt</button>
        }
    </div>
}

@code {

    public Response Response { get; set; }
    public RegisterModel RegisterModel { get; set; } = new RegisterModel();
    public int AgencyId { get; set; }
    public List<Agency> Agencies { get; set; } = new List<Agency>();
    public string ConfirmPassword { get; set; }
    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Agencies = await Http.GetFromJsonAsync<List<Agency>>("api/agency");
    }

    public async Task Submit()
    {
        if (Validate() == true)
        {
            RegisterModel.Agency = await Http.GetFromJsonAsync<Agency>($"api/agency/{AgencyId}");
            var result = await Http.PostAsJsonAsync<RegisterModel>("api/authenticate/register", RegisterModel);
            Response = await result.Content.ReadFromJsonAsync<Response>();
        }
    }
    public void NavigateBackToRealtors()
    {
        NavigationManager.NavigateTo("/realtors");
    }

    public bool Validate()
    {
        if (ConfirmPassword != RegisterModel.Password)
        {
            ErrorMessage = "Lösenorden matchar inte.";
            return false;
        }
        else
        {
            return true;
        }
    }



}
