@page "/browse/{id:int}"
@using Client.Services
@using Models;
@inject HttpClient Http
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime
@inject MessageService MessageService

@*Author: Eden Yusof-Ioannidis*@

@if (Message != null)
{
    <div class="center">
        @if (Message.Type == MessageType.Error)
        {
            <div class="error-box">
                <div class="error-message">
                    @Message.Text
                </div>
            </div>
        }
        @if (Message.Type == MessageType.Success)
        {
            <div class="success-box">
                <div class="success-message">
                    @Message.Text
                </div>
            </div>
        }
    </div>
}

<div class="house-details card">
    @if (House == null)
    {
        <p>Ett ögonblick...</p>
    }
    else
    {
        <div class="main-left">
            @if (House.Gallery != null && House.Gallery.Count > 0)
            {
                <img src="@House.Gallery.FirstOrDefault().ImageURL" onerror="this.onerror=null;this.src='https://bphomes.co.uk/wp-content/uploads/2023/03/placeholder-867x600.jpg';" />
            }
            else
            {
                <img src="https://bphomes.co.uk/wp-content/uploads/2023/03/placeholder-867x600.jpg" />
            }
            @if (House.Gallery != null && House.Gallery.Count > 1)
            {
                <a href="/images/@House.HouseId"><button>@House.Gallery.Count bilder</button></a>
            }

            @if (House.Realtor != null && House.Realtor.UserName == UserNameFromToken && HasBeenSold == false)
            {
                <button type="button" @onclick="MarkAsSold">Markera som sålt</button>
                <button type="button" @onclick="() => NavigateToUpdateHouse(House.HouseId)">Redigera objekt</button>
                <button type="button" @onclick="() => NavigateToDeleteHouse(House.HouseId)">Radera objekt</button>

            }
            @if (House.Realtor != null && House.Realtor.UserName == UserNameFromToken && HasBeenSold == true)
            {
                <button class="filled" type="button">
                    <span class="material-symbols-outlined">
                        done
                    </span> Markerad som såld
                </button>
            }

            <div class="details">
                <div class="details-left">
                    <h1>@House.Adress</h1>
                    @if (House.County != null)
                    {
                        <h2>@House.Municipality.MunicipalityName, @House.County.CountyName</h2>
                    }
                    @if (House.Category != null)
                    {
                        <p class="category-line">
                            @if (House.Category.CategoryName == "Villa")
                            {
                                <span class="material-symbols-outlined">
                                    home
                                </span>
                            }
                            else if (House.Category.CategoryName == "Par/Kedje/Radhus")
                            {
                                <span class="material-symbols-outlined">
                                    other_houses
                                </span>
                            }
                            else if (House.Category.CategoryName == "Lägenhet")
                            {
                                <span class="material-symbols-outlined">
                                    location_city
                                </span>
                            }
                            else if (House.Category.CategoryName == "Fritidsboende")
                            {
                                <span class="material-symbols-outlined">
                                    cottage
                                </span>
                            }
                            else if (House.Category.CategoryName == "Gård")
                            {
                                <span class="material-symbols-outlined">
                                    fence
                                </span>
                            }
                            @House.Category.CategoryName
                        </p>
                    }
                    <div class="description">
                        @if (!string.IsNullOrEmpty(House?.Description))
                        {
                            @foreach (var paragraph in House.Description.Split(new[] { "\r\n\r\n", "\n\n", "\n", "\r" }, StringSplitOptions.None))
                            {
                                <p>@paragraph</p>
                            }
                        }
                    </div>
                </div>
                <div class="details-right">
                    <p class="price">@House.Price.ToString("#,0", new System.Globalization.CultureInfo("sv-SE")) kr</p>
                    @if (House.NumberOfRooms > 0)
                    {
                        <p>Antal rum: @House.NumberOfRooms</p>
                    }
                    @if (House.LivingArea > 0)
                    {
                        <p>Boarea: @House.LivingArea &#13217</p>
                    }
                    @if (House.AuxiliaryArea > 0)
                    {
                        <p>Biarea: @House.AuxiliaryArea &#13217</p>
                    }
                    @if (House.PlotArea > 0)
                    {
                        <p>Tomtarea: @House.PlotArea &#13217</p>
                    }
                    @if (House.YearOfConstruction > 0)
                    {
                        <p>Byggår: @House.YearOfConstruction</p>
                    }
                    @if (House.OperatingCostPerYear > 0)
                    {
                        <p>Årlig driftkostnad: @House.OperatingCostPerYear.ToString("#,0", new System.Globalization.CultureInfo("sv-SE")) kr/år </p>
                    }
                </div>
            </div>


            <iframe width="900"
                    height="400"
                    frameborder="0" style="border:0"
                    referrerpolicy="no-referrer-when-downgrade"
                    src="@srcUrl"
                    allowfullscreen>
            </iframe>
        </div>
        <div class="main-right">
            @if (House.Realtor != null)
            {
                <p>Ansvarig mäklare</p>
                <h2 @onclick="() => NavigateToRealtorProfile(House.Realtor.Id)">@House.Realtor.FirstName @House.Realtor.LastName</h2>
                <p><i class="fa-regular fa-envelope"></i> @House.Realtor.Email</p>
                @if (!string.IsNullOrEmpty(House.Realtor.PhoneNumber))
                {
                    <p><i class="fa-solid fa-phone"></i> @House.Realtor.PhoneNumber</p>
                }
                <div class="realtor-circle" @onclick="() => NavigateToRealtorProfile(House.Realtor.Id)">                                        
                    @if (House.Realtor.Avatar != null)
                    {
                        <img src="@House.Realtor.Avatar" onerror="this.onerror=null;this.src='https://static.vecteezy.com/system/resources/thumbnails/003/337/584/small/default-avatar-photo-placeholder-profile-icon-vector.jpg';" />
                    }
                    else
                    {
                        <img src="https://static.vecteezy.com/system/resources/thumbnails/003/337/584/small/default-avatar-photo-placeholder-profile-icon-vector.jpg" />
                    }

                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public string srcUrl { get; set; }
    public APIKey APIKey { get; set; }

    public string UserNameFromToken { get; set; }

    private House House { get; set; } = new House();

    public bool HasBeenSold { get; set; }

    public Message Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var message = MessageService.ReceiveMessage();
        if (message != null)
        {
            Message = message;
        }

        House = await Http.GetFromJsonAsync<House>($"api/house/{Id}");
        APIKey = await Http.GetFromJsonAsync<APIKey>("api/APIKey");
        srcUrl = ($"https://www.google.com/maps/embed/v1/place?key={APIKey.Key}&q={House.Adress},{House.Municipality}");
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var currentToken = await Http.GetAsync($"api/authenticate/getusername?token={token}");
        UserNameFromToken = await currentToken.Content.ReadAsStringAsync();
        HasBeenSold = House.HasBeenSold;

        StateHasChanged();
    }

    private async Task MarkAsSold()
    {
        await Http.PutAsJsonAsync<int>($"api/house/sell/{House.HouseId}", House.HouseId);
        HasBeenSold = true;
        StateHasChanged();
    }

    void NavigateToRealtorProfile(string id)
    {
        NavigationManager.NavigateTo($"/realtor/profile/{id}");
    }

    void NavigateToUpdateHouse(int id)
    {
        NavigationManager.NavigateTo($"/houses/update/{id}");
    }

    void NavigateToDeleteHouse(int id)
    {
        NavigationManager.NavigateTo($"/houses/delete/{id}");
    }
}
